package com.lmdna.spider.http.servlet;

import java.io.IOException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.PriorityBlockingQueue;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;

import com.lmdna.spider.dao.model.SpiderVerifyImg;
import com.lmdna.spider.node.master.MasterNode;

public class SpiderVerifyImgServlet extends HttpServlet {
	
	private PriorityBlockingQueue<SpiderVerifyImg> verifyImgQueue = new PriorityBlockingQueue<SpiderVerifyImg>(100,new Comparator<SpiderVerifyImg>() {
		@Override
		public int compare(SpiderVerifyImg o1, SpiderVerifyImg o2) {
			long expire1 = o1.getExpire();
			long expire2 = o2.getExpire();
			long imgcreatetime1 = o1.getImgCreateTime().getTime();
			long imgcreatetime2 = o2.getImgCreateTime().getTime();
			long timenow = System.currentTimeMillis();
			//到期所剩时间
			long lefttime1 = expire1 - timenow + imgcreatetime1;
			long lefttime2 = expire2 - timenow + imgcreatetime2;
			//优先级
			int priority1 = o1.getPriority();
			int priority2 = o2.getPriority();
			if(priority1 == priority2){
				if(lefttime1 < lefttime2){
					return 1;
				}else if(lefttime1 > lefttime2){
					return -1;
				}else{
					return 0;
				}
			}else if(priority1 > priority2){
				return 1;
			}else{
				return -1;
			}
		}
	});
	
	public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		ServletContext application = null;
		try{
			response.setContentType("text/html; charset=UTF-8");
			application = this.getServletContext();
		    String uri = request.getRequestURI();
			String sub_uri = StringUtils.substringAfterLast(uri, "/");
			if("get".equals(sub_uri)){
				final MasterNode masterNode = (MasterNode) application.getAttribute("master.node");
				SpiderVerifyImg img = poll(masterNode);
				if(img == null){
					response.getWriter().write("no verifyimgs exist currently!");
				}else{
					request.setAttribute("verifyimg", img);
					RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/jsp/verifyimage/verify.jsp");
					dispatcher.forward(request, response);
				}
			}else if("submit".equals(sub_uri)){
				final MasterNode masterNode = (MasterNode) application.getAttribute("master.node");
				String verifyCode = request.getParameter("verifycode");
				String id = request.getParameter("id");
				Map<String,Object> paramMap = new HashMap<String,Object>();
				paramMap.put("id", id);
				paramMap.put("verifycode", verifyCode);
				masterNode.getFacade().submitVerifyCode(paramMap);
				response.getWriter().write("{\"result\":\"ok\"}");
			}else if("submitandget".equals(sub_uri)){
				final MasterNode masterNode = (MasterNode) application.getAttribute("master.node");
				String verifyCode = request.getParameter("verifyCode");
				String id = request.getParameter("id");
				Map<String,Object> paramMap = new HashMap<String,Object>();
				paramMap.put("id", id);
				paramMap.put("verifycode", verifyCode);
				masterNode.getFacade().submitVerifyCode(paramMap);
				SpiderVerifyImg img = poll(masterNode);
				if(img==null){
					response.getWriter().write("no more verifyimgs!");
				}else{
					request.setAttribute("verifyimg", img);
					RequestDispatcher dispatcher = request.getRequestDispatcher("/WEB-INF/jsp/verifyimage/verify.jsp");
					dispatcher.forward(request, response);
				}
			}
		}catch(Throwable t){
			
		}finally{
			
		}
	}
	
	public SpiderVerifyImg poll(MasterNode masterNode){
		SpiderVerifyImg img = verifyImgQueue.poll();
		if(img == null){
			List<SpiderVerifyImg> imglist = masterNode.getFacade().getVerifyImgList();
			verifyImgQueue.addAll(imglist);
			img = verifyImgQueue.poll();
		}
		return img;
	}
	
}
